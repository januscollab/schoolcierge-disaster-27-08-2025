#!/usr/bin/env node

/**
 * CX - SchoolCierge Task Management CLI
 * 
 * This is a wrapper around npm scripts for easier command execution.
 * Instead of: npm run task:add "Title"
 * You can use: cx add "Title"
 */

const { spawn } = require('child_process');
const path = require('path');

// Get command and arguments
const [command, ...args] = process.argv.slice(2);

// Map cx commands to npm scripts
const commandMap = {
  // Help
  'help': 'npm run help',
  '--help': 'npm run help',
  '-h': 'npm run help',
  
  // Task management
  'add': 'npm run task:add --',
  'update': 'npm run task:update --',
  'list': 'npm run task:list --',
  'ls': 'npm run task:list --',
  'detail': 'npm run task:detail --',
  'show': 'npm run task:detail --',
  'complete': 'npm run task:complete --',
  'done': 'npm run task:complete --',
  'start': 'npm run task:start --',
  'begin': 'npm run task:start --',
  'build': 'npm run task:build --',
  'b': 'npm run task:build --',
  
  // Dependency management
  'resolve': 'node .project/scripts/dependency-resolver.js',
  'dependencies': 'node .project/scripts/dependency-resolver.js',
  
  // Task health monitoring
  'health': 'node .project/scripts/cx-health.js',
  'health-fix': 'node .project/scripts/cx-health.js --fix',
  
  // Status and visualization
  'status': 'npm run status --',
  's': 'npm run status --',
  'dashboard': 'npm run dashboard:html',
  'dash': 'npm run dashboard',
  'd': 'npm run dashboard',
  'live': 'npm run live',
  'l': 'npm run live',
  
  // Parallel task management
  'analyze': 'npm run analyze --',
  'parallel': 'npm run parallel --',
  'p': 'npm run parallel --',
  
  // Event monitoring
  'ticker': 'npm run ticker',
  'events': 'npm run events',
  'event-ticker': 'npm run ticker',
  
  'html': 'npm run dashboard:html',
  'next': 'npm run whats-next',
  'whats-next': 'npm run whats-next',
  'gantt': 'npm run visualize:gantt',
  'deps': 'npm run visualize:deps',
  'dependencies': 'npm run visualize:deps',
  'burndown': 'npm run visualize -- burndown',
  
  // Sprint management
  'sprint:new': 'npm run sprint:plan',
  'sprint:create': 'npm run sprint:plan',
  'sprint:status': 'npm run sprint:status',
  'sprint': 'npm run sprint:status',
  
  // Advanced
  'validate': 'npm run validate',
  'views': 'npm run views:generate',
  'generate': 'npm run views:generate',
  'security': 'npm run security:audit',
  'audit': 'npm run security:audit',
  'test': 'node .project/scripts/test-runner.js',
  
  // Integrity checking
  'integrity': 'node .project/scripts/integrity-checker.js',
  'integrity-fix': 'node .project/scripts/integrity-checker.js --fix',
  'check': 'node .project/scripts/integrity-checker.js',
};

// Show help if no command
if (!command) {
  console.log('SchoolCierge CLI - Use "cx help" for available commands');
  process.exit(0);
}

// Get the npm script to run
let npmCommand = commandMap[command];

// If no direct mapping, try to map it as a npm script
if (!npmCommand) {
  // Try direct npm script mapping
  npmCommand = `npm run ${command}`;
}

// Build the full command string with properly escaped arguments
const quotedArgs = args.map(arg => {
  // Escape single quotes and wrap in single quotes for shell safety
  return `'${arg.replace(/'/g, "'\\''")}'`;
});

const fullCommand = args.length > 0 
  ? `${npmCommand} ${quotedArgs.join(' ')}`
  : npmCommand;

// Execute the command - split command and args to avoid deprecation warning
// We need to parse the full command to extract the actual command and arguments
const parts = fullCommand.split(' ');
const cmd = parts[0];
const cmdArgs = parts.slice(1);

const child = spawn(cmd, cmdArgs, {
  stdio: 'inherit',
  cwd: __dirname
});

child.on('error', (error) => {
  console.error(`Error: ${error.message}`);
  process.exit(1);
});

child.on('exit', (code) => {
  process.exit(code);
});